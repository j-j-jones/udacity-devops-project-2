Description: Jerry Jones-Udacity-Server Deployment for Udagram Services

Parameters:
  EnvironmentName:
   Description: An Environment name that will be prefixed to Udagram resources.
   Type: String
   Default: UdacityProject-01

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to our Load Balancer
      GroupName: LoadBalancer
      VpcId:
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupEgress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to our host and limit SSH
      GroupName: WebServer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0 
      SecurityGroupEgress: 
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          sudo aws s3 cp s3://udacity-project-01-udagram/udagram.zip . 
          #aws s3 cp s3://udacity-project-01-udagram/index.html .
          sudo unzip -o udagram.zip .
          #wget -P ../../var/www/html http://udacity-project-01-udagram.s3-us-west-2.amazonaws.com/index.html
          #wget -P http://udacity-project-01-udagram.s3-us-west-2.amazonaws.com/index.html 
          #aws s3 sync s3://udacity-project-01-udagram
     
      ImageId: ami-026c8acd92718196b 
      IamInstanceProfile: !Ref RootInstanceProfile
      #IamInstanceProfile: arn:aws:iam::724427472536:instance-profile/UdacityProject01Server-A-RootInstanceProfile-1DRK81W0S3T8A
      KeyName: Udacity-Project-02
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      InstanceType: t2.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'      

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS" 
      #- Fn::ImportValue: !Sub "${EnvironmentName}-PUB-NETS" 
      LaunchConfigurationName: 
        Ref: WebAppLaunchConfig
      MaxSize: '4'
      MinSize: '1'  
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: 
          Ref: WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer1
      Port: 80
      Protocol: HTTP    
      
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule 
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'Listener' 
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"  

  WebAppLoadBalancer1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
      - Ref: LBSecGroup
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"  

  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
              #- "s3.amazonaws.com"
              - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles: 
        - Ref: "RootRole"
  
  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "RootRole"            

Outputs:

  WebAppLoadBalancer1DNS:
    Description: Public DNS\URL of the Load Balancer
    Value: !Join [ "", [ 'http://', !GetAtt WebAppLoadBalancer1.DNSName ]]
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNS-NAME 

  